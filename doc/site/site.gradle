/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "geb.groovy-module"
    id "geb.manuals"
    alias(libs.plugins.node)
    alias(libs.plugins.ratpackGroovy)
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
}

configurations {
    currentManual

    distribution
}

manuals {
    include(
        "1.0", "1.1.1", "2.0", "2.1", "2.2", "2.3", "2.3.1", "3.0", "3.0.1", "3.1", "3.2", "3.3", "3.4", "3.4.1",
        "4.0", "4.1", "5.0", "5.1"
    )
    currentManual.from(configurations.currentManual)
}

dependencies {
    groovy libs.groovy25

    testImplementation libs.spockCoreGroovy25
    testImplementation libs.jsoup
    testImplementation libs.gebSpockGroovy25
    testImplementation libs.htmlUnitDriver

    currentManual project(path: ":doc:manual", configuration: "manual")
}

node {
    version = '8.17.0'

    download = true

    nodeModulesDir = file("src/npm")
}

def npmCiTask = tasks.register("npmCi", NpmTask) {
    inputs.files(
        'src/npm/package-lock.json',
        'src/npm/semantic.json'
    )
    outputs.dir 'src/npm/node_modules'
    outputs.dir 'src/npm/semantic'

    npmCommand = ["ci"]
}

def generateResourcesTask = tasks.register("generateResources", Sync) {
    from(tasks.named("gatherManuals")) {
        into 'public/manual'
    }
    from tasks.named("generateConfigProperties")

    into 'src/main/generatedResources'
}

sourceSets.main.resources.srcDir generateResourcesTask

tasks.named("ideaModule") {
    dependsOn generateResourcesTask
}

tasks.named("processResources") {
    from(npmCiTask) {
        includeEmptyDirs = false
        include 'jquery/dist/jquery.min.js'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'js', it.sourceName)
        }
    }
    from(npmCiTask) {
        includeEmptyDirs = false
        include '@browser-logos/android/android_128x128.png'
        include '@browser-logos/chrome/chrome_128x128.png'
        include '@browser-logos/safari/safari_128x128.png'
        include '@browser-logos/safari-ios/safari-ios_128x128.png'
        include '@browser-logos/edge/edge_128x128.png'
        include '@browser-logos/firefox/firefox_128x128.png'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'images', it.sourceName)
        }
    }
    from(npmCiTask) {
        includeEmptyDirs = false
        include 'dist/semantic.min.js'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'js', *it.relativePath.segments[1..-1])
        }
    }
    from(npmCiTask) {
        includeEmptyDirs = false
        include 'dist/semantic.min.css'
        include 'dist/themes/default/assets/fonts/**'
        include 'dist/themes/default/assets/images/**'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'css', *it.relativePath.segments[1..-1])
        }
    }
}

tasks.register("publish", Exec) {
    commandLine 'git push git@heroku.com:gebish.git master'.tokenize(' ')
}

def distributionTask = tasks.register("distribution", Sync) {
    with distributions.main.contents
    into "${buildDir}/distribution"
}

artifacts {
    distribution(distributionTask.map { it.outputs.files.singleFile }) {
        builtBy distributionTask
    }
}

if (project.gradle.startParameter.continuous) {
    run {
        flattenClassloaders = true
    }
}

idea {
    module {
        excludeDirs += file('src/npm/node_modules')
    }
}
